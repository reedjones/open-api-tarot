/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BodyEntireUpdateByPrimaryKeyProductsIdPut} from '../model/BodyEntireUpdateByPrimaryKeyProductsIdPut';
import {BodyEntireUpdateManyByQueryProductsPut} from '../model/BodyEntireUpdateManyByQueryProductsPut';
import {BodyPartialUpdateManyByQueryProductsPatch} from '../model/BodyPartialUpdateManyByQueryProductsPatch';
import {BodyPartialUpdateOneByPrimaryKeyProductsIdPatch} from '../model/BodyPartialUpdateOneByPrimaryKeyProductsIdPatch';
import {DeckIdFromComparisonOperator10} from '../model/DeckIdFromComparisonOperator10';
import {DeckIdFromComparisonOperator11} from '../model/DeckIdFromComparisonOperator11';
import {DeckIdFromComparisonOperator12} from '../model/DeckIdFromComparisonOperator12';
import {DeckIdFromComparisonOperator13} from '../model/DeckIdFromComparisonOperator13';
import {DeckIdFromComparisonOperator14} from '../model/DeckIdFromComparisonOperator14';
import {DeckIdFromComparisonOperator15} from '../model/DeckIdFromComparisonOperator15';
import {DeckIdFromComparisonOperator8} from '../model/DeckIdFromComparisonOperator8';
import {DeckIdFromComparisonOperator9} from '../model/DeckIdFromComparisonOperator9';
import {DeckIdListComparisonOperator10} from '../model/DeckIdListComparisonOperator10';
import {DeckIdListComparisonOperator11} from '../model/DeckIdListComparisonOperator11';
import {DeckIdListComparisonOperator12} from '../model/DeckIdListComparisonOperator12';
import {DeckIdListComparisonOperator13} from '../model/DeckIdListComparisonOperator13';
import {DeckIdListComparisonOperator14} from '../model/DeckIdListComparisonOperator14';
import {DeckIdListComparisonOperator15} from '../model/DeckIdListComparisonOperator15';
import {DeckIdListComparisonOperator8} from '../model/DeckIdListComparisonOperator8';
import {DeckIdListComparisonOperator9} from '../model/DeckIdListComparisonOperator9';
import {DeckIdToComparisonOperator10} from '../model/DeckIdToComparisonOperator10';
import {DeckIdToComparisonOperator11} from '../model/DeckIdToComparisonOperator11';
import {DeckIdToComparisonOperator12} from '../model/DeckIdToComparisonOperator12';
import {DeckIdToComparisonOperator13} from '../model/DeckIdToComparisonOperator13';
import {DeckIdToComparisonOperator14} from '../model/DeckIdToComparisonOperator14';
import {DeckIdToComparisonOperator15} from '../model/DeckIdToComparisonOperator15';
import {DeckIdToComparisonOperator8} from '../model/DeckIdToComparisonOperator8';
import {DeckIdToComparisonOperator9} from '../model/DeckIdToComparisonOperator9';
import {DisplayPriceFromComparisonOperator} from '../model/DisplayPriceFromComparisonOperator';
import {DisplayPriceFromComparisonOperator1} from '../model/DisplayPriceFromComparisonOperator1';
import {DisplayPriceFromComparisonOperator2} from '../model/DisplayPriceFromComparisonOperator2';
import {DisplayPriceFromComparisonOperator3} from '../model/DisplayPriceFromComparisonOperator3';
import {DisplayPriceFromComparisonOperator4} from '../model/DisplayPriceFromComparisonOperator4';
import {DisplayPriceFromComparisonOperator5} from '../model/DisplayPriceFromComparisonOperator5';
import {DisplayPriceFromComparisonOperator6} from '../model/DisplayPriceFromComparisonOperator6';
import {DisplayPriceFromComparisonOperator7} from '../model/DisplayPriceFromComparisonOperator7';
import {DisplayPriceListComparisonOperator} from '../model/DisplayPriceListComparisonOperator';
import {DisplayPriceListComparisonOperator1} from '../model/DisplayPriceListComparisonOperator1';
import {DisplayPriceListComparisonOperator2} from '../model/DisplayPriceListComparisonOperator2';
import {DisplayPriceListComparisonOperator3} from '../model/DisplayPriceListComparisonOperator3';
import {DisplayPriceListComparisonOperator4} from '../model/DisplayPriceListComparisonOperator4';
import {DisplayPriceListComparisonOperator5} from '../model/DisplayPriceListComparisonOperator5';
import {DisplayPriceListComparisonOperator6} from '../model/DisplayPriceListComparisonOperator6';
import {DisplayPriceListComparisonOperator7} from '../model/DisplayPriceListComparisonOperator7';
import {DisplayPriceToComparisonOperator} from '../model/DisplayPriceToComparisonOperator';
import {DisplayPriceToComparisonOperator1} from '../model/DisplayPriceToComparisonOperator1';
import {DisplayPriceToComparisonOperator2} from '../model/DisplayPriceToComparisonOperator2';
import {DisplayPriceToComparisonOperator3} from '../model/DisplayPriceToComparisonOperator3';
import {DisplayPriceToComparisonOperator4} from '../model/DisplayPriceToComparisonOperator4';
import {DisplayPriceToComparisonOperator5} from '../model/DisplayPriceToComparisonOperator5';
import {DisplayPriceToComparisonOperator6} from '../model/DisplayPriceToComparisonOperator6';
import {DisplayPriceToComparisonOperator7} from '../model/DisplayPriceToComparisonOperator7';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {IdFromComparisonOperator12} from '../model/IdFromComparisonOperator12';
import {IdFromComparisonOperator13} from '../model/IdFromComparisonOperator13';
import {IdFromComparisonOperator14} from '../model/IdFromComparisonOperator14';
import {IdFromComparisonOperator15} from '../model/IdFromComparisonOperator15';
import {IdListComparisonOperator12} from '../model/IdListComparisonOperator12';
import {IdListComparisonOperator13} from '../model/IdListComparisonOperator13';
import {IdListComparisonOperator14} from '../model/IdListComparisonOperator14';
import {IdListComparisonOperator15} from '../model/IdListComparisonOperator15';
import {IdToComparisonOperator12} from '../model/IdToComparisonOperator12';
import {IdToComparisonOperator13} from '../model/IdToComparisonOperator13';
import {IdToComparisonOperator14} from '../model/IdToComparisonOperator14';
import {IdToComparisonOperator15} from '../model/IdToComparisonOperator15';
import {MatchingPatternInStringBase} from '../model/MatchingPatternInStringBase';
import {StripePriceListComparisonOperator} from '../model/StripePriceListComparisonOperator';
import {StripePriceListComparisonOperator1} from '../model/StripePriceListComparisonOperator1';
import {StripePriceListComparisonOperator2} from '../model/StripePriceListComparisonOperator2';
import {StripePriceListComparisonOperator3} from '../model/StripePriceListComparisonOperator3';
import {StripePriceListComparisonOperator4} from '../model/StripePriceListComparisonOperator4';
import {StripePriceListComparisonOperator5} from '../model/StripePriceListComparisonOperator5';
import {StripePriceListComparisonOperator6} from '../model/StripePriceListComparisonOperator6';
import {StripePriceListComparisonOperator7} from '../model/StripePriceListComparisonOperator7';
import {StripeProductListComparisonOperator} from '../model/StripeProductListComparisonOperator';
import {StripeProductListComparisonOperator1} from '../model/StripeProductListComparisonOperator1';
import {StripeProductListComparisonOperator2} from '../model/StripeProductListComparisonOperator2';
import {StripeProductListComparisonOperator3} from '../model/StripeProductListComparisonOperator3';
import {StripeProductListComparisonOperator4} from '../model/StripeProductListComparisonOperator4';
import {StripeProductListComparisonOperator5} from '../model/StripeProductListComparisonOperator5';
import {StripeProductListComparisonOperator6} from '../model/StripeProductListComparisonOperator6';
import {StripeProductListComparisonOperator7} from '../model/StripeProductListComparisonOperator7';
import {TarotProductCreateManyItemListResponseModel} from '../model/TarotProductCreateManyItemListResponseModel';
import {TarotProductCreateManyItemRequestModel} from '../model/TarotProductCreateManyItemRequestModel';
import {TarotProductDeleteManyItemListResponseModel} from '../model/TarotProductDeleteManyItemListResponseModel';
import {TarotProductDeleteOneResponseModel} from '../model/TarotProductDeleteOneResponseModel';
import {TarotProductFindManyItemListResponseModel} from '../model/TarotProductFindManyItemListResponseModel';
import {TarotProductFindOneResponseModel} from '../model/TarotProductFindOneResponseModel';
import {TarotProductPatchManyItemListResponseModel} from '../model/TarotProductPatchManyItemListResponseModel';
import {TarotProductPatchOneResponseModel} from '../model/TarotProductPatchOneResponseModel';
import {TarotProductUpdateManyItemListResponseModel} from '../model/TarotProductUpdateManyItemListResponseModel';
import {TarotProductUpdateOneResponseModel} from '../model/TarotProductUpdateOneResponseModel';

/**
* Shop service.
* @module api/ShopApi
* @version 0.1.0
*/
export class ShopApi {

    /**
    * Constructs a new ShopApi. 
    * @alias module:api/ShopApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteManyByQueryProductsDelete operation.
     * @callback moduleapi/ShopApi~deleteManyByQueryProductsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductDeleteManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Many By Query
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator14} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator14} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator14} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator2} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator2} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator2} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator2} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator2} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator10} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator10} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator10} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~deleteManyByQueryProductsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteManyByQueryProductsDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotProductDeleteManyItemListResponseModel;

      return this.apiClient.callApi(
        '/products', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteOneByPrimaryKeyProductsIdDelete operation.
     * @callback moduleapi/ShopApi~deleteOneByPrimaryKeyProductsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductDeleteOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator6} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator6} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator6} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator6} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator6} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator14} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator14} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator14} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~deleteOneByPrimaryKeyProductsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteOneByPrimaryKeyProductsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOneByPrimaryKeyProductsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotProductDeleteOneResponseModel;

      return this.apiClient.callApi(
        '/products/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the entireUpdateByPrimaryKeyProductsIdPut operation.
     * @callback moduleapi/ShopApi~entireUpdateByPrimaryKeyProductsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductUpdateOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entire Update By Primary Key
     * @param {module:model/BodyEntireUpdateByPrimaryKeyProductsIdPut} body 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator5} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator5} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator5} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator5} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator5} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator13} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator13} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator13} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~entireUpdateByPrimaryKeyProductsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    entireUpdateByPrimaryKeyProductsIdPut(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireUpdateByPrimaryKeyProductsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entireUpdateByPrimaryKeyProductsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotProductUpdateOneResponseModel;

      return this.apiClient.callApi(
        '/products/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the entireUpdateManyByQueryProductsPut operation.
     * @callback moduleapi/ShopApi~entireUpdateManyByQueryProductsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductUpdateManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entire Update Many By Query
     * @param {module:model/BodyEntireUpdateManyByQueryProductsPut} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator13} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator13} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator13} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator1} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator1} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator1} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator1} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator1} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator9} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator9} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator9} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~entireUpdateManyByQueryProductsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    entireUpdateManyByQueryProductsPut(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireUpdateManyByQueryProductsPut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotProductUpdateManyItemListResponseModel;

      return this.apiClient.callApi(
        '/products', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getManyProductsGet operation.
     * @callback moduleapi/ShopApi~getManyProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductFindManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Many
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator12} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator12} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator12} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator8} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator8} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator8} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Array.<String>} opts.orderByColumns &lt;br&gt; support column:              &lt;br&gt; [&#x27;id&#x27;, &#x27;stripe_product&#x27;, &#x27;stripe_price&#x27;, &#x27;display_price&#x27;, &#x27;deck_id&#x27;] &lt;hr&gt;&lt;br&gt; support ordering:               &lt;br&gt; [&#x27;DESC&#x27;, &#x27;ASC&#x27;]              &lt;hr&gt;              &lt;br/&gt;example:              &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column:ASC             &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column: DESC              &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column    :    DESC             &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column (default sort by ASC)
     * @param {module:api/ShopApi~getManyProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getManyProductsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi'),'limit': opts['limit'],'offset': opts['offset'],'order_by_columns': this.apiClient.buildCollectionParam(opts['orderByColumns'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotProductFindManyItemListResponseModel;

      return this.apiClient.callApi(
        '/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneByPrimaryKeyProductsIdGet operation.
     * @callback moduleapi/ShopApi~getOneByPrimaryKeyProductsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductFindOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator4} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator4} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator4} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator4} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator4} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator12} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator12} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator12} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~getOneByPrimaryKeyProductsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneByPrimaryKeyProductsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneByPrimaryKeyProductsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotProductFindOneResponseModel;

      return this.apiClient.callApi(
        '/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the insertManyProductsPost operation.
     * @callback moduleapi/ShopApi~insertManyProductsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductCreateManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Many
     * @param {Array.<module:model/TarotProductCreateManyItemRequestModel>} body 
     * @param {module:api/ShopApi~insertManyProductsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    insertManyProductsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling insertManyProductsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotProductCreateManyItemListResponseModel;

      return this.apiClient.callApi(
        '/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateManyByQueryProductsPatch operation.
     * @callback moduleapi/ShopApi~partialUpdateManyByQueryProductsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductPatchManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update Many By Query
     * @param {Object} opts Optional parameters
     * @param {module:model/BodyPartialUpdateManyByQueryProductsPatch} opts.body 
     * @param {module:model/IdFromComparisonOperator15} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator15} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator15} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator3} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator3} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator3} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator3} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator3} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator11} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator11} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator11} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~partialUpdateManyByQueryProductsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partialUpdateManyByQueryProductsPatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotProductPatchManyItemListResponseModel;

      return this.apiClient.callApi(
        '/products', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateOneByPrimaryKeyProductsIdPatch operation.
     * @callback moduleapi/ShopApi~partialUpdateOneByPrimaryKeyProductsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotProductPatchOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/BodyPartialUpdateOneByPrimaryKeyProductsIdPatch} opts.body 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripeProductStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripeProductStr 
     * @param {module:model/StripeProductListComparisonOperator7} opts.stripeProductListComparisonOperator 
     * @param {Array.<String>} opts.stripeProductList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.stripePriceStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.stripePriceStr 
     * @param {module:model/StripePriceListComparisonOperator7} opts.stripePriceListComparisonOperator 
     * @param {Array.<String>} opts.stripePriceList 
     * @param {module:model/DisplayPriceFromComparisonOperator7} opts.displayPriceFromComparisonOperator 
     * @param {module:model/DisplayPriceToComparisonOperator7} opts.displayPriceToComparisonOperator 
     * @param {Number} opts.displayPriceFrom 
     * @param {Number} opts.displayPriceTo 
     * @param {module:model/DisplayPriceListComparisonOperator7} opts.displayPriceListComparisonOperator 
     * @param {Array.<Number>} opts.displayPriceList 
     * @param {module:model/DeckIdFromComparisonOperator15} opts.deckIdFromComparisonOperator 
     * @param {module:model/DeckIdToComparisonOperator15} opts.deckIdToComparisonOperator 
     * @param {Number} opts.deckIdFrom 
     * @param {Number} opts.deckIdTo 
     * @param {module:model/DeckIdListComparisonOperator15} opts.deckIdListComparisonOperator 
     * @param {Array.<Number>} opts.deckIdList 
     * @param {module:api/ShopApi~partialUpdateOneByPrimaryKeyProductsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partialUpdateOneByPrimaryKeyProductsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateOneByPrimaryKeyProductsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'stripe_product____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripeProductStrMatchingPattern'], 'multi'),'stripe_product____str': this.apiClient.buildCollectionParam(opts['stripeProductStr'], 'multi'),'stripe_product____list_____comparison_operator': opts['stripeProductListComparisonOperator'],'stripe_product____list': this.apiClient.buildCollectionParam(opts['stripeProductList'], 'multi'),'stripe_price____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['stripePriceStrMatchingPattern'], 'multi'),'stripe_price____str': this.apiClient.buildCollectionParam(opts['stripePriceStr'], 'multi'),'stripe_price____list_____comparison_operator': opts['stripePriceListComparisonOperator'],'stripe_price____list': this.apiClient.buildCollectionParam(opts['stripePriceList'], 'multi'),'display_price____from_____comparison_operator': opts['displayPriceFromComparisonOperator'],'display_price____to_____comparison_operator': opts['displayPriceToComparisonOperator'],'display_price____from': opts['displayPriceFrom'],'display_price____to': opts['displayPriceTo'],'display_price____list_____comparison_operator': opts['displayPriceListComparisonOperator'],'display_price____list': this.apiClient.buildCollectionParam(opts['displayPriceList'], 'multi'),'deck_id____from_____comparison_operator': opts['deckIdFromComparisonOperator'],'deck_id____to_____comparison_operator': opts['deckIdToComparisonOperator'],'deck_id____from': opts['deckIdFrom'],'deck_id____to': opts['deckIdTo'],'deck_id____list_____comparison_operator': opts['deckIdListComparisonOperator'],'deck_id____list': this.apiClient.buildCollectionParam(opts['deckIdList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotProductPatchOneResponseModel;

      return this.apiClient.callApi(
        '/products/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}