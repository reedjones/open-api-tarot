/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AltListComparisonOperator} from '../model/AltListComparisonOperator';
import {AltListComparisonOperator1} from '../model/AltListComparisonOperator1';
import {AltListComparisonOperator2} from '../model/AltListComparisonOperator2';
import {AltListComparisonOperator3} from '../model/AltListComparisonOperator3';
import {AltListComparisonOperator4} from '../model/AltListComparisonOperator4';
import {AltListComparisonOperator5} from '../model/AltListComparisonOperator5';
import {AltListComparisonOperator6} from '../model/AltListComparisonOperator6';
import {AltListComparisonOperator7} from '../model/AltListComparisonOperator7';
import {BodyEntireUpdateByPrimaryKeyDecksIdPut} from '../model/BodyEntireUpdateByPrimaryKeyDecksIdPut';
import {BodyEntireUpdateManyByQueryDecksPut} from '../model/BodyEntireUpdateManyByQueryDecksPut';
import {BodyPartialUpdateManyByQueryDecksPatch} from '../model/BodyPartialUpdateManyByQueryDecksPatch';
import {BodyPartialUpdateOneByPrimaryKeyDecksIdPatch} from '../model/BodyPartialUpdateOneByPrimaryKeyDecksIdPatch';
import {CaptionListComparisonOperator} from '../model/CaptionListComparisonOperator';
import {CaptionListComparisonOperator1} from '../model/CaptionListComparisonOperator1';
import {CaptionListComparisonOperator2} from '../model/CaptionListComparisonOperator2';
import {CaptionListComparisonOperator3} from '../model/CaptionListComparisonOperator3';
import {CaptionListComparisonOperator4} from '../model/CaptionListComparisonOperator4';
import {CaptionListComparisonOperator5} from '../model/CaptionListComparisonOperator5';
import {CaptionListComparisonOperator6} from '../model/CaptionListComparisonOperator6';
import {CaptionListComparisonOperator7} from '../model/CaptionListComparisonOperator7';
import {CreatedCardsListComparisonOperator} from '../model/CreatedCardsListComparisonOperator';
import {CreatedCardsListComparisonOperator1} from '../model/CreatedCardsListComparisonOperator1';
import {CreatedCardsListComparisonOperator2} from '../model/CreatedCardsListComparisonOperator2';
import {CreatedCardsListComparisonOperator3} from '../model/CreatedCardsListComparisonOperator3';
import {CreatedCardsListComparisonOperator4} from '../model/CreatedCardsListComparisonOperator4';
import {CreatedCardsListComparisonOperator5} from '../model/CreatedCardsListComparisonOperator5';
import {CreatedCardsListComparisonOperator6} from '../model/CreatedCardsListComparisonOperator6';
import {CreatedCardsListComparisonOperator7} from '../model/CreatedCardsListComparisonOperator7';
import {CreatedFromComparisonOperator} from '../model/CreatedFromComparisonOperator';
import {CreatedFromComparisonOperator1} from '../model/CreatedFromComparisonOperator1';
import {CreatedFromComparisonOperator2} from '../model/CreatedFromComparisonOperator2';
import {CreatedFromComparisonOperator3} from '../model/CreatedFromComparisonOperator3';
import {CreatedFromComparisonOperator4} from '../model/CreatedFromComparisonOperator4';
import {CreatedFromComparisonOperator5} from '../model/CreatedFromComparisonOperator5';
import {CreatedFromComparisonOperator6} from '../model/CreatedFromComparisonOperator6';
import {CreatedFromComparisonOperator7} from '../model/CreatedFromComparisonOperator7';
import {CreatedListComparisonOperator} from '../model/CreatedListComparisonOperator';
import {CreatedListComparisonOperator1} from '../model/CreatedListComparisonOperator1';
import {CreatedListComparisonOperator2} from '../model/CreatedListComparisonOperator2';
import {CreatedListComparisonOperator3} from '../model/CreatedListComparisonOperator3';
import {CreatedListComparisonOperator4} from '../model/CreatedListComparisonOperator4';
import {CreatedListComparisonOperator5} from '../model/CreatedListComparisonOperator5';
import {CreatedListComparisonOperator6} from '../model/CreatedListComparisonOperator6';
import {CreatedListComparisonOperator7} from '../model/CreatedListComparisonOperator7';
import {CreatedToComparisonOperator} from '../model/CreatedToComparisonOperator';
import {CreatedToComparisonOperator1} from '../model/CreatedToComparisonOperator1';
import {CreatedToComparisonOperator2} from '../model/CreatedToComparisonOperator2';
import {CreatedToComparisonOperator3} from '../model/CreatedToComparisonOperator3';
import {CreatedToComparisonOperator4} from '../model/CreatedToComparisonOperator4';
import {CreatedToComparisonOperator5} from '../model/CreatedToComparisonOperator5';
import {CreatedToComparisonOperator6} from '../model/CreatedToComparisonOperator6';
import {CreatedToComparisonOperator7} from '../model/CreatedToComparisonOperator7';
import {DescriptionListComparisonOperator} from '../model/DescriptionListComparisonOperator';
import {DescriptionListComparisonOperator1} from '../model/DescriptionListComparisonOperator1';
import {DescriptionListComparisonOperator2} from '../model/DescriptionListComparisonOperator2';
import {DescriptionListComparisonOperator3} from '../model/DescriptionListComparisonOperator3';
import {DescriptionListComparisonOperator4} from '../model/DescriptionListComparisonOperator4';
import {DescriptionListComparisonOperator5} from '../model/DescriptionListComparisonOperator5';
import {DescriptionListComparisonOperator6} from '../model/DescriptionListComparisonOperator6';
import {DescriptionListComparisonOperator7} from '../model/DescriptionListComparisonOperator7';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {IdFromComparisonOperator} from '../model/IdFromComparisonOperator';
import {IdFromComparisonOperator1} from '../model/IdFromComparisonOperator1';
import {IdFromComparisonOperator2} from '../model/IdFromComparisonOperator2';
import {IdFromComparisonOperator3} from '../model/IdFromComparisonOperator3';
import {IdListComparisonOperator} from '../model/IdListComparisonOperator';
import {IdListComparisonOperator1} from '../model/IdListComparisonOperator1';
import {IdListComparisonOperator2} from '../model/IdListComparisonOperator2';
import {IdListComparisonOperator3} from '../model/IdListComparisonOperator3';
import {IdToComparisonOperator} from '../model/IdToComparisonOperator';
import {IdToComparisonOperator1} from '../model/IdToComparisonOperator1';
import {IdToComparisonOperator2} from '../model/IdToComparisonOperator2';
import {IdToComparisonOperator3} from '../model/IdToComparisonOperator3';
import {ImageHeightFromComparisonOperator} from '../model/ImageHeightFromComparisonOperator';
import {ImageHeightFromComparisonOperator1} from '../model/ImageHeightFromComparisonOperator1';
import {ImageHeightFromComparisonOperator2} from '../model/ImageHeightFromComparisonOperator2';
import {ImageHeightFromComparisonOperator3} from '../model/ImageHeightFromComparisonOperator3';
import {ImageHeightFromComparisonOperator4} from '../model/ImageHeightFromComparisonOperator4';
import {ImageHeightFromComparisonOperator5} from '../model/ImageHeightFromComparisonOperator5';
import {ImageHeightFromComparisonOperator6} from '../model/ImageHeightFromComparisonOperator6';
import {ImageHeightFromComparisonOperator7} from '../model/ImageHeightFromComparisonOperator7';
import {ImageHeightListComparisonOperator} from '../model/ImageHeightListComparisonOperator';
import {ImageHeightListComparisonOperator1} from '../model/ImageHeightListComparisonOperator1';
import {ImageHeightListComparisonOperator2} from '../model/ImageHeightListComparisonOperator2';
import {ImageHeightListComparisonOperator3} from '../model/ImageHeightListComparisonOperator3';
import {ImageHeightListComparisonOperator4} from '../model/ImageHeightListComparisonOperator4';
import {ImageHeightListComparisonOperator5} from '../model/ImageHeightListComparisonOperator5';
import {ImageHeightListComparisonOperator6} from '../model/ImageHeightListComparisonOperator6';
import {ImageHeightListComparisonOperator7} from '../model/ImageHeightListComparisonOperator7';
import {ImageHeightToComparisonOperator} from '../model/ImageHeightToComparisonOperator';
import {ImageHeightToComparisonOperator1} from '../model/ImageHeightToComparisonOperator1';
import {ImageHeightToComparisonOperator2} from '../model/ImageHeightToComparisonOperator2';
import {ImageHeightToComparisonOperator3} from '../model/ImageHeightToComparisonOperator3';
import {ImageHeightToComparisonOperator4} from '../model/ImageHeightToComparisonOperator4';
import {ImageHeightToComparisonOperator5} from '../model/ImageHeightToComparisonOperator5';
import {ImageHeightToComparisonOperator6} from '../model/ImageHeightToComparisonOperator6';
import {ImageHeightToComparisonOperator7} from '../model/ImageHeightToComparisonOperator7';
import {ImageListComparisonOperator} from '../model/ImageListComparisonOperator';
import {ImageListComparisonOperator1} from '../model/ImageListComparisonOperator1';
import {ImageListComparisonOperator2} from '../model/ImageListComparisonOperator2';
import {ImageListComparisonOperator3} from '../model/ImageListComparisonOperator3';
import {ImageListComparisonOperator4} from '../model/ImageListComparisonOperator4';
import {ImageListComparisonOperator5} from '../model/ImageListComparisonOperator5';
import {ImageListComparisonOperator6} from '../model/ImageListComparisonOperator6';
import {ImageListComparisonOperator7} from '../model/ImageListComparisonOperator7';
import {ImageWidthFromComparisonOperator} from '../model/ImageWidthFromComparisonOperator';
import {ImageWidthFromComparisonOperator1} from '../model/ImageWidthFromComparisonOperator1';
import {ImageWidthFromComparisonOperator2} from '../model/ImageWidthFromComparisonOperator2';
import {ImageWidthFromComparisonOperator3} from '../model/ImageWidthFromComparisonOperator3';
import {ImageWidthFromComparisonOperator4} from '../model/ImageWidthFromComparisonOperator4';
import {ImageWidthFromComparisonOperator5} from '../model/ImageWidthFromComparisonOperator5';
import {ImageWidthFromComparisonOperator6} from '../model/ImageWidthFromComparisonOperator6';
import {ImageWidthFromComparisonOperator7} from '../model/ImageWidthFromComparisonOperator7';
import {ImageWidthListComparisonOperator} from '../model/ImageWidthListComparisonOperator';
import {ImageWidthListComparisonOperator1} from '../model/ImageWidthListComparisonOperator1';
import {ImageWidthListComparisonOperator2} from '../model/ImageWidthListComparisonOperator2';
import {ImageWidthListComparisonOperator3} from '../model/ImageWidthListComparisonOperator3';
import {ImageWidthListComparisonOperator4} from '../model/ImageWidthListComparisonOperator4';
import {ImageWidthListComparisonOperator5} from '../model/ImageWidthListComparisonOperator5';
import {ImageWidthListComparisonOperator6} from '../model/ImageWidthListComparisonOperator6';
import {ImageWidthListComparisonOperator7} from '../model/ImageWidthListComparisonOperator7';
import {ImageWidthToComparisonOperator} from '../model/ImageWidthToComparisonOperator';
import {ImageWidthToComparisonOperator1} from '../model/ImageWidthToComparisonOperator1';
import {ImageWidthToComparisonOperator2} from '../model/ImageWidthToComparisonOperator2';
import {ImageWidthToComparisonOperator3} from '../model/ImageWidthToComparisonOperator3';
import {ImageWidthToComparisonOperator4} from '../model/ImageWidthToComparisonOperator4';
import {ImageWidthToComparisonOperator5} from '../model/ImageWidthToComparisonOperator5';
import {ImageWidthToComparisonOperator6} from '../model/ImageWidthToComparisonOperator6';
import {ImageWidthToComparisonOperator7} from '../model/ImageWidthToComparisonOperator7';
import {IntentionListComparisonOperator} from '../model/IntentionListComparisonOperator';
import {IntentionListComparisonOperator1} from '../model/IntentionListComparisonOperator1';
import {IntentionListComparisonOperator2} from '../model/IntentionListComparisonOperator2';
import {IntentionListComparisonOperator3} from '../model/IntentionListComparisonOperator3';
import {IntentionListComparisonOperator4} from '../model/IntentionListComparisonOperator4';
import {IntentionListComparisonOperator5} from '../model/IntentionListComparisonOperator5';
import {IntentionListComparisonOperator6} from '../model/IntentionListComparisonOperator6';
import {IntentionListComparisonOperator7} from '../model/IntentionListComparisonOperator7';
import {MatchingPatternInStringBase} from '../model/MatchingPatternInStringBase';
import {NameListComparisonOperator} from '../model/NameListComparisonOperator';
import {NameListComparisonOperator1} from '../model/NameListComparisonOperator1';
import {NameListComparisonOperator2} from '../model/NameListComparisonOperator2';
import {NameListComparisonOperator3} from '../model/NameListComparisonOperator3';
import {NameListComparisonOperator4} from '../model/NameListComparisonOperator4';
import {NameListComparisonOperator5} from '../model/NameListComparisonOperator5';
import {NameListComparisonOperator6} from '../model/NameListComparisonOperator6';
import {NameListComparisonOperator7} from '../model/NameListComparisonOperator7';
import {TarotDeckCreateManyItemListResponseModel} from '../model/TarotDeckCreateManyItemListResponseModel';
import {TarotDeckCreateManyItemRequestModel} from '../model/TarotDeckCreateManyItemRequestModel';
import {TarotDeckDeleteManyItemListResponseModel} from '../model/TarotDeckDeleteManyItemListResponseModel';
import {TarotDeckDeleteOneResponseModel} from '../model/TarotDeckDeleteOneResponseModel';
import {TarotDeckFindManyItemListResponseModel} from '../model/TarotDeckFindManyItemListResponseModel';
import {TarotDeckFindOneResponseModel} from '../model/TarotDeckFindOneResponseModel';
import {TarotDeckPatchManyItemListResponseModel} from '../model/TarotDeckPatchManyItemListResponseModel';
import {TarotDeckPatchOneResponseModel} from '../model/TarotDeckPatchOneResponseModel';
import {TarotDeckUpdateManyItemListResponseModel} from '../model/TarotDeckUpdateManyItemListResponseModel';
import {TarotDeckUpdateOneResponseModel} from '../model/TarotDeckUpdateOneResponseModel';
import {UidListComparisonOperator} from '../model/UidListComparisonOperator';
import {UidListComparisonOperator1} from '../model/UidListComparisonOperator1';
import {UidListComparisonOperator2} from '../model/UidListComparisonOperator2';
import {UidListComparisonOperator3} from '../model/UidListComparisonOperator3';
import {UidListComparisonOperator4} from '../model/UidListComparisonOperator4';
import {UidListComparisonOperator5} from '../model/UidListComparisonOperator5';
import {UidListComparisonOperator6} from '../model/UidListComparisonOperator6';
import {UidListComparisonOperator7} from '../model/UidListComparisonOperator7';
import {UpdatedFromComparisonOperator} from '../model/UpdatedFromComparisonOperator';
import {UpdatedFromComparisonOperator1} from '../model/UpdatedFromComparisonOperator1';
import {UpdatedFromComparisonOperator2} from '../model/UpdatedFromComparisonOperator2';
import {UpdatedFromComparisonOperator3} from '../model/UpdatedFromComparisonOperator3';
import {UpdatedFromComparisonOperator4} from '../model/UpdatedFromComparisonOperator4';
import {UpdatedFromComparisonOperator5} from '../model/UpdatedFromComparisonOperator5';
import {UpdatedFromComparisonOperator6} from '../model/UpdatedFromComparisonOperator6';
import {UpdatedFromComparisonOperator7} from '../model/UpdatedFromComparisonOperator7';
import {UpdatedListComparisonOperator} from '../model/UpdatedListComparisonOperator';
import {UpdatedListComparisonOperator1} from '../model/UpdatedListComparisonOperator1';
import {UpdatedListComparisonOperator2} from '../model/UpdatedListComparisonOperator2';
import {UpdatedListComparisonOperator3} from '../model/UpdatedListComparisonOperator3';
import {UpdatedListComparisonOperator4} from '../model/UpdatedListComparisonOperator4';
import {UpdatedListComparisonOperator5} from '../model/UpdatedListComparisonOperator5';
import {UpdatedListComparisonOperator6} from '../model/UpdatedListComparisonOperator6';
import {UpdatedListComparisonOperator7} from '../model/UpdatedListComparisonOperator7';
import {UpdatedToComparisonOperator} from '../model/UpdatedToComparisonOperator';
import {UpdatedToComparisonOperator1} from '../model/UpdatedToComparisonOperator1';
import {UpdatedToComparisonOperator2} from '../model/UpdatedToComparisonOperator2';
import {UpdatedToComparisonOperator3} from '../model/UpdatedToComparisonOperator3';
import {UpdatedToComparisonOperator4} from '../model/UpdatedToComparisonOperator4';
import {UpdatedToComparisonOperator5} from '../model/UpdatedToComparisonOperator5';
import {UpdatedToComparisonOperator6} from '../model/UpdatedToComparisonOperator6';
import {UpdatedToComparisonOperator7} from '../model/UpdatedToComparisonOperator7';
import {UrlListComparisonOperator} from '../model/UrlListComparisonOperator';
import {UrlListComparisonOperator1} from '../model/UrlListComparisonOperator1';
import {UrlListComparisonOperator2} from '../model/UrlListComparisonOperator2';
import {UrlListComparisonOperator3} from '../model/UrlListComparisonOperator3';
import {UrlListComparisonOperator4} from '../model/UrlListComparisonOperator4';
import {UrlListComparisonOperator5} from '../model/UrlListComparisonOperator5';
import {UrlListComparisonOperator6} from '../model/UrlListComparisonOperator6';
import {UrlListComparisonOperator7} from '../model/UrlListComparisonOperator7';

/**
* DecksTarot service.
* @module api/DecksTarotApi
* @version 0.1.0
*/
export class DecksTarotApi {

    /**
    * Constructs a new DecksTarotApi. 
    * @alias module:api/DecksTarotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteManyByQueryDecksDelete operation.
     * @callback moduleapi/DecksTarotApi~deleteManyByQueryDecksDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckDeleteManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Many By Query
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator2} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator2} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator2} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator2} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator2} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator2} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator2} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator2} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator2} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator2} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator2} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator2} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator2} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator2} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator2} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator2} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator2} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator2} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator2} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator2} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator2} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator2} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator2} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator2} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~deleteManyByQueryDecksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteManyByQueryDecksDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotDeckDeleteManyItemListResponseModel;

      return this.apiClient.callApi(
        '/decks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteOneByPrimaryKeyDecksIdDelete operation.
     * @callback moduleapi/DecksTarotApi~deleteOneByPrimaryKeyDecksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckDeleteOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator6} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator6} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator6} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator6} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator6} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator6} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator6} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator6} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator6} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator6} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator6} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator6} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator6} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator6} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator6} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator6} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator6} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator6} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator6} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator6} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator6} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~deleteOneByPrimaryKeyDecksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteOneByPrimaryKeyDecksIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOneByPrimaryKeyDecksIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotDeckDeleteOneResponseModel;

      return this.apiClient.callApi(
        '/decks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the entireUpdateByPrimaryKeyDecksIdPut operation.
     * @callback moduleapi/DecksTarotApi~entireUpdateByPrimaryKeyDecksIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckUpdateOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entire Update By Primary Key
     * @param {module:model/BodyEntireUpdateByPrimaryKeyDecksIdPut} body 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator5} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator5} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator5} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator5} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator5} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator5} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator5} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator5} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator5} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator5} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator5} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator5} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator5} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator5} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator5} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator5} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator5} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator5} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator5} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator5} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator5} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~entireUpdateByPrimaryKeyDecksIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    entireUpdateByPrimaryKeyDecksIdPut(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireUpdateByPrimaryKeyDecksIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entireUpdateByPrimaryKeyDecksIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotDeckUpdateOneResponseModel;

      return this.apiClient.callApi(
        '/decks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the entireUpdateManyByQueryDecksPut operation.
     * @callback moduleapi/DecksTarotApi~entireUpdateManyByQueryDecksPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckUpdateManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entire Update Many By Query
     * @param {module:model/BodyEntireUpdateManyByQueryDecksPut} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator1} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator1} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator1} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator1} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator1} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator1} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator1} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator1} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator1} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator1} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator1} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator1} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator1} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator1} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator1} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator1} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator1} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator1} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator1} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator1} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator1} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator1} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator1} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator1} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~entireUpdateManyByQueryDecksPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    entireUpdateManyByQueryDecksPut(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireUpdateManyByQueryDecksPut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotDeckUpdateManyItemListResponseModel;

      return this.apiClient.callApi(
        '/decks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getManyDecksGet operation.
     * @callback moduleapi/DecksTarotApi~getManyDecksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckFindManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Many
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Array.<String>} opts.orderByColumns &lt;br&gt; support column:              &lt;br&gt; [&#x27;id&#x27;, &#x27;uid&#x27;, &#x27;name&#x27;, &#x27;description&#x27;, &#x27;created&#x27;, &#x27;updated&#x27;, &#x27;created_cards&#x27;, &#x27;intention&#x27;, &#x27;alt&#x27;, &#x27;caption&#x27;, &#x27;image&#x27;, &#x27;image_height&#x27;, &#x27;image_width&#x27;, &#x27;url&#x27;] &lt;hr&gt;&lt;br&gt; support ordering:               &lt;br&gt; [&#x27;DESC&#x27;, &#x27;ASC&#x27;]              &lt;hr&gt;              &lt;br/&gt;example:              &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column:ASC             &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column: DESC              &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column    :    DESC             &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column (default sort by ASC)
     * @param {module:api/DecksTarotApi~getManyDecksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getManyDecksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi'),'limit': opts['limit'],'offset': opts['offset'],'order_by_columns': this.apiClient.buildCollectionParam(opts['orderByColumns'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotDeckFindManyItemListResponseModel;

      return this.apiClient.callApi(
        '/decks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneByPrimaryKeyDecksIdGet operation.
     * @callback moduleapi/DecksTarotApi~getOneByPrimaryKeyDecksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckFindOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator4} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator4} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator4} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator4} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator4} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator4} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator4} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator4} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator4} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator4} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator4} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator4} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator4} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator4} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator4} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator4} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator4} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator4} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator4} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator4} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator4} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~getOneByPrimaryKeyDecksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneByPrimaryKeyDecksIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneByPrimaryKeyDecksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TarotDeckFindOneResponseModel;

      return this.apiClient.callApi(
        '/decks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the insertManyDecksPost operation.
     * @callback moduleapi/DecksTarotApi~insertManyDecksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckCreateManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Many
     * @param {Array.<module:model/TarotDeckCreateManyItemRequestModel>} body 
     * @param {module:api/DecksTarotApi~insertManyDecksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    insertManyDecksPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling insertManyDecksPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotDeckCreateManyItemListResponseModel;

      return this.apiClient.callApi(
        '/decks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateManyByQueryDecksPatch operation.
     * @callback moduleapi/DecksTarotApi~partialUpdateManyByQueryDecksPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckPatchManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update Many By Query
     * @param {Object} opts Optional parameters
     * @param {module:model/BodyPartialUpdateManyByQueryDecksPatch} opts.body 
     * @param {module:model/IdFromComparisonOperator3} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator3} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator3} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator3} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator3} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator3} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator3} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator3} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator3} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator3} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator3} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator3} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator3} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator3} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator3} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator3} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator3} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator3} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator3} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator3} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator3} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator3} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator3} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator3} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~partialUpdateManyByQueryDecksPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partialUpdateManyByQueryDecksPatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotDeckPatchManyItemListResponseModel;

      return this.apiClient.callApi(
        '/decks', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateOneByPrimaryKeyDecksIdPatch operation.
     * @callback moduleapi/DecksTarotApi~partialUpdateOneByPrimaryKeyDecksIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TarotDeckPatchOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/BodyPartialUpdateOneByPrimaryKeyDecksIdPatch} opts.body 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.uidStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.uidStr 
     * @param {module:model/UidListComparisonOperator7} opts.uidListComparisonOperator 
     * @param {Array.<String>} opts.uidList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.nameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.nameStr 
     * @param {module:model/NameListComparisonOperator7} opts.nameListComparisonOperator 
     * @param {Array.<String>} opts.nameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.descriptionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.descriptionStr 
     * @param {module:model/DescriptionListComparisonOperator7} opts.descriptionListComparisonOperator 
     * @param {Array.<String>} opts.descriptionList 
     * @param {module:model/CreatedFromComparisonOperator7} opts.createdFromComparisonOperator 
     * @param {module:model/CreatedToComparisonOperator7} opts.createdToComparisonOperator 
     * @param {Date} opts.createdFrom 
     * @param {Date} opts.createdTo 
     * @param {module:model/CreatedListComparisonOperator7} opts.createdListComparisonOperator 
     * @param {Array.<Date>} opts.createdList 
     * @param {module:model/UpdatedFromComparisonOperator7} opts.updatedFromComparisonOperator 
     * @param {module:model/UpdatedToComparisonOperator7} opts.updatedToComparisonOperator 
     * @param {Date} opts.updatedFrom 
     * @param {Date} opts.updatedTo 
     * @param {module:model/UpdatedListComparisonOperator7} opts.updatedListComparisonOperator 
     * @param {Array.<Date>} opts.updatedList 
     * @param {module:model/CreatedCardsListComparisonOperator7} opts.createdCardsListComparisonOperator 
     * @param {Array.<Boolean>} opts.createdCardsList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.intentionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.intentionStr 
     * @param {module:model/IntentionListComparisonOperator7} opts.intentionListComparisonOperator 
     * @param {Array.<String>} opts.intentionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.altStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.altStr 
     * @param {module:model/AltListComparisonOperator7} opts.altListComparisonOperator 
     * @param {Array.<String>} opts.altList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.captionStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.captionStr 
     * @param {module:model/CaptionListComparisonOperator7} opts.captionListComparisonOperator 
     * @param {Array.<String>} opts.captionList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.imageStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.imageStr 
     * @param {module:model/ImageListComparisonOperator7} opts.imageListComparisonOperator 
     * @param {Array.<String>} opts.imageList 
     * @param {module:model/ImageHeightFromComparisonOperator7} opts.imageHeightFromComparisonOperator 
     * @param {module:model/ImageHeightToComparisonOperator7} opts.imageHeightToComparisonOperator 
     * @param {Number} opts.imageHeightFrom 
     * @param {Number} opts.imageHeightTo 
     * @param {module:model/ImageHeightListComparisonOperator7} opts.imageHeightListComparisonOperator 
     * @param {Array.<Number>} opts.imageHeightList 
     * @param {module:model/ImageWidthFromComparisonOperator7} opts.imageWidthFromComparisonOperator 
     * @param {module:model/ImageWidthToComparisonOperator7} opts.imageWidthToComparisonOperator 
     * @param {Number} opts.imageWidthFrom 
     * @param {Number} opts.imageWidthTo 
     * @param {module:model/ImageWidthListComparisonOperator7} opts.imageWidthListComparisonOperator 
     * @param {Array.<Number>} opts.imageWidthList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.urlStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.urlStr 
     * @param {module:model/UrlListComparisonOperator7} opts.urlListComparisonOperator 
     * @param {Array.<String>} opts.urlList 
     * @param {module:api/DecksTarotApi~partialUpdateOneByPrimaryKeyDecksIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partialUpdateOneByPrimaryKeyDecksIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateOneByPrimaryKeyDecksIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'uid____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['uidStrMatchingPattern'], 'multi'),'uid____str': this.apiClient.buildCollectionParam(opts['uidStr'], 'multi'),'uid____list_____comparison_operator': opts['uidListComparisonOperator'],'uid____list': this.apiClient.buildCollectionParam(opts['uidList'], 'multi'),'name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['nameStrMatchingPattern'], 'multi'),'name____str': this.apiClient.buildCollectionParam(opts['nameStr'], 'multi'),'name____list_____comparison_operator': opts['nameListComparisonOperator'],'name____list': this.apiClient.buildCollectionParam(opts['nameList'], 'multi'),'description____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['descriptionStrMatchingPattern'], 'multi'),'description____str': this.apiClient.buildCollectionParam(opts['descriptionStr'], 'multi'),'description____list_____comparison_operator': opts['descriptionListComparisonOperator'],'description____list': this.apiClient.buildCollectionParam(opts['descriptionList'], 'multi'),'created____from_____comparison_operator': opts['createdFromComparisonOperator'],'created____to_____comparison_operator': opts['createdToComparisonOperator'],'created____from': opts['createdFrom'],'created____to': opts['createdTo'],'created____list_____comparison_operator': opts['createdListComparisonOperator'],'created____list': this.apiClient.buildCollectionParam(opts['createdList'], 'multi'),'updated____from_____comparison_operator': opts['updatedFromComparisonOperator'],'updated____to_____comparison_operator': opts['updatedToComparisonOperator'],'updated____from': opts['updatedFrom'],'updated____to': opts['updatedTo'],'updated____list_____comparison_operator': opts['updatedListComparisonOperator'],'updated____list': this.apiClient.buildCollectionParam(opts['updatedList'], 'multi'),'created_cards____list_____comparison_operator': opts['createdCardsListComparisonOperator'],'created_cards____list': this.apiClient.buildCollectionParam(opts['createdCardsList'], 'multi'),'intention____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['intentionStrMatchingPattern'], 'multi'),'intention____str': this.apiClient.buildCollectionParam(opts['intentionStr'], 'multi'),'intention____list_____comparison_operator': opts['intentionListComparisonOperator'],'intention____list': this.apiClient.buildCollectionParam(opts['intentionList'], 'multi'),'alt____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['altStrMatchingPattern'], 'multi'),'alt____str': this.apiClient.buildCollectionParam(opts['altStr'], 'multi'),'alt____list_____comparison_operator': opts['altListComparisonOperator'],'alt____list': this.apiClient.buildCollectionParam(opts['altList'], 'multi'),'caption____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['captionStrMatchingPattern'], 'multi'),'caption____str': this.apiClient.buildCollectionParam(opts['captionStr'], 'multi'),'caption____list_____comparison_operator': opts['captionListComparisonOperator'],'caption____list': this.apiClient.buildCollectionParam(opts['captionList'], 'multi'),'image____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['imageStrMatchingPattern'], 'multi'),'image____str': this.apiClient.buildCollectionParam(opts['imageStr'], 'multi'),'image____list_____comparison_operator': opts['imageListComparisonOperator'],'image____list': this.apiClient.buildCollectionParam(opts['imageList'], 'multi'),'image_height____from_____comparison_operator': opts['imageHeightFromComparisonOperator'],'image_height____to_____comparison_operator': opts['imageHeightToComparisonOperator'],'image_height____from': opts['imageHeightFrom'],'image_height____to': opts['imageHeightTo'],'image_height____list_____comparison_operator': opts['imageHeightListComparisonOperator'],'image_height____list': this.apiClient.buildCollectionParam(opts['imageHeightList'], 'multi'),'image_width____from_____comparison_operator': opts['imageWidthFromComparisonOperator'],'image_width____to_____comparison_operator': opts['imageWidthToComparisonOperator'],'image_width____from': opts['imageWidthFrom'],'image_width____to': opts['imageWidthTo'],'image_width____list_____comparison_operator': opts['imageWidthListComparisonOperator'],'image_width____list': this.apiClient.buildCollectionParam(opts['imageWidthList'], 'multi'),'url____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['urlStrMatchingPattern'], 'multi'),'url____str': this.apiClient.buildCollectionParam(opts['urlStr'], 'multi'),'url____list_____comparison_operator': opts['urlListComparisonOperator'],'url____list': this.apiClient.buildCollectionParam(opts['urlList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TarotDeckPatchOneResponseModel;

      return this.apiClient.callApi(
        '/decks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}