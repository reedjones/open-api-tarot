/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AuthUserCreateManyItemListResponseModel} from '../model/AuthUserCreateManyItemListResponseModel';
import {AuthUserCreateManyItemRequestModel} from '../model/AuthUserCreateManyItemRequestModel';
import {AuthUserDeleteManyItemListResponseModel} from '../model/AuthUserDeleteManyItemListResponseModel';
import {AuthUserDeleteOneResponseModel} from '../model/AuthUserDeleteOneResponseModel';
import {AuthUserFindManyItemListResponseModel} from '../model/AuthUserFindManyItemListResponseModel';
import {AuthUserFindOneResponseModel} from '../model/AuthUserFindOneResponseModel';
import {AuthUserPatchManyItemListResponseModel} from '../model/AuthUserPatchManyItemListResponseModel';
import {AuthUserPatchOneResponseModel} from '../model/AuthUserPatchOneResponseModel';
import {AuthUserUpdateManyItemListResponseModel} from '../model/AuthUserUpdateManyItemListResponseModel';
import {AuthUserUpdateOneResponseModel} from '../model/AuthUserUpdateOneResponseModel';
import {BodyEntireUpdateByPrimaryKeyUsersIdPut} from '../model/BodyEntireUpdateByPrimaryKeyUsersIdPut';
import {BodyEntireUpdateManyByQueryUsersPut} from '../model/BodyEntireUpdateManyByQueryUsersPut';
import {BodyPartialUpdateManyByQueryUsersPatch} from '../model/BodyPartialUpdateManyByQueryUsersPatch';
import {BodyPartialUpdateOneByPrimaryKeyUsersIdPatch} from '../model/BodyPartialUpdateOneByPrimaryKeyUsersIdPatch';
import {DateJoinedFromComparisonOperator} from '../model/DateJoinedFromComparisonOperator';
import {DateJoinedFromComparisonOperator1} from '../model/DateJoinedFromComparisonOperator1';
import {DateJoinedFromComparisonOperator2} from '../model/DateJoinedFromComparisonOperator2';
import {DateJoinedFromComparisonOperator3} from '../model/DateJoinedFromComparisonOperator3';
import {DateJoinedFromComparisonOperator4} from '../model/DateJoinedFromComparisonOperator4';
import {DateJoinedFromComparisonOperator5} from '../model/DateJoinedFromComparisonOperator5';
import {DateJoinedFromComparisonOperator6} from '../model/DateJoinedFromComparisonOperator6';
import {DateJoinedFromComparisonOperator7} from '../model/DateJoinedFromComparisonOperator7';
import {DateJoinedListComparisonOperator} from '../model/DateJoinedListComparisonOperator';
import {DateJoinedListComparisonOperator1} from '../model/DateJoinedListComparisonOperator1';
import {DateJoinedListComparisonOperator2} from '../model/DateJoinedListComparisonOperator2';
import {DateJoinedListComparisonOperator3} from '../model/DateJoinedListComparisonOperator3';
import {DateJoinedListComparisonOperator4} from '../model/DateJoinedListComparisonOperator4';
import {DateJoinedListComparisonOperator5} from '../model/DateJoinedListComparisonOperator5';
import {DateJoinedListComparisonOperator6} from '../model/DateJoinedListComparisonOperator6';
import {DateJoinedListComparisonOperator7} from '../model/DateJoinedListComparisonOperator7';
import {DateJoinedToComparisonOperator} from '../model/DateJoinedToComparisonOperator';
import {DateJoinedToComparisonOperator1} from '../model/DateJoinedToComparisonOperator1';
import {DateJoinedToComparisonOperator2} from '../model/DateJoinedToComparisonOperator2';
import {DateJoinedToComparisonOperator3} from '../model/DateJoinedToComparisonOperator3';
import {DateJoinedToComparisonOperator4} from '../model/DateJoinedToComparisonOperator4';
import {DateJoinedToComparisonOperator5} from '../model/DateJoinedToComparisonOperator5';
import {DateJoinedToComparisonOperator6} from '../model/DateJoinedToComparisonOperator6';
import {DateJoinedToComparisonOperator7} from '../model/DateJoinedToComparisonOperator7';
import {EmailListComparisonOperator} from '../model/EmailListComparisonOperator';
import {EmailListComparisonOperator1} from '../model/EmailListComparisonOperator1';
import {EmailListComparisonOperator2} from '../model/EmailListComparisonOperator2';
import {EmailListComparisonOperator3} from '../model/EmailListComparisonOperator3';
import {EmailListComparisonOperator4} from '../model/EmailListComparisonOperator4';
import {EmailListComparisonOperator5} from '../model/EmailListComparisonOperator5';
import {EmailListComparisonOperator6} from '../model/EmailListComparisonOperator6';
import {EmailListComparisonOperator7} from '../model/EmailListComparisonOperator7';
import {FirstNameListComparisonOperator} from '../model/FirstNameListComparisonOperator';
import {FirstNameListComparisonOperator1} from '../model/FirstNameListComparisonOperator1';
import {FirstNameListComparisonOperator2} from '../model/FirstNameListComparisonOperator2';
import {FirstNameListComparisonOperator3} from '../model/FirstNameListComparisonOperator3';
import {FirstNameListComparisonOperator4} from '../model/FirstNameListComparisonOperator4';
import {FirstNameListComparisonOperator5} from '../model/FirstNameListComparisonOperator5';
import {FirstNameListComparisonOperator6} from '../model/FirstNameListComparisonOperator6';
import {FirstNameListComparisonOperator7} from '../model/FirstNameListComparisonOperator7';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {IdFromComparisonOperator16} from '../model/IdFromComparisonOperator16';
import {IdFromComparisonOperator17} from '../model/IdFromComparisonOperator17';
import {IdFromComparisonOperator18} from '../model/IdFromComparisonOperator18';
import {IdFromComparisonOperator19} from '../model/IdFromComparisonOperator19';
import {IdListComparisonOperator16} from '../model/IdListComparisonOperator16';
import {IdListComparisonOperator17} from '../model/IdListComparisonOperator17';
import {IdListComparisonOperator18} from '../model/IdListComparisonOperator18';
import {IdListComparisonOperator19} from '../model/IdListComparisonOperator19';
import {IdToComparisonOperator16} from '../model/IdToComparisonOperator16';
import {IdToComparisonOperator17} from '../model/IdToComparisonOperator17';
import {IdToComparisonOperator18} from '../model/IdToComparisonOperator18';
import {IdToComparisonOperator19} from '../model/IdToComparisonOperator19';
import {IsActiveListComparisonOperator} from '../model/IsActiveListComparisonOperator';
import {IsActiveListComparisonOperator1} from '../model/IsActiveListComparisonOperator1';
import {IsActiveListComparisonOperator2} from '../model/IsActiveListComparisonOperator2';
import {IsActiveListComparisonOperator3} from '../model/IsActiveListComparisonOperator3';
import {IsActiveListComparisonOperator4} from '../model/IsActiveListComparisonOperator4';
import {IsActiveListComparisonOperator5} from '../model/IsActiveListComparisonOperator5';
import {IsActiveListComparisonOperator6} from '../model/IsActiveListComparisonOperator6';
import {IsActiveListComparisonOperator7} from '../model/IsActiveListComparisonOperator7';
import {IsStaffListComparisonOperator} from '../model/IsStaffListComparisonOperator';
import {IsStaffListComparisonOperator1} from '../model/IsStaffListComparisonOperator1';
import {IsStaffListComparisonOperator2} from '../model/IsStaffListComparisonOperator2';
import {IsStaffListComparisonOperator3} from '../model/IsStaffListComparisonOperator3';
import {IsStaffListComparisonOperator4} from '../model/IsStaffListComparisonOperator4';
import {IsStaffListComparisonOperator5} from '../model/IsStaffListComparisonOperator5';
import {IsStaffListComparisonOperator6} from '../model/IsStaffListComparisonOperator6';
import {IsStaffListComparisonOperator7} from '../model/IsStaffListComparisonOperator7';
import {IsSuperuserListComparisonOperator} from '../model/IsSuperuserListComparisonOperator';
import {IsSuperuserListComparisonOperator1} from '../model/IsSuperuserListComparisonOperator1';
import {IsSuperuserListComparisonOperator2} from '../model/IsSuperuserListComparisonOperator2';
import {IsSuperuserListComparisonOperator3} from '../model/IsSuperuserListComparisonOperator3';
import {IsSuperuserListComparisonOperator4} from '../model/IsSuperuserListComparisonOperator4';
import {IsSuperuserListComparisonOperator5} from '../model/IsSuperuserListComparisonOperator5';
import {IsSuperuserListComparisonOperator6} from '../model/IsSuperuserListComparisonOperator6';
import {IsSuperuserListComparisonOperator7} from '../model/IsSuperuserListComparisonOperator7';
import {LastLoginFromComparisonOperator} from '../model/LastLoginFromComparisonOperator';
import {LastLoginFromComparisonOperator1} from '../model/LastLoginFromComparisonOperator1';
import {LastLoginFromComparisonOperator2} from '../model/LastLoginFromComparisonOperator2';
import {LastLoginFromComparisonOperator3} from '../model/LastLoginFromComparisonOperator3';
import {LastLoginFromComparisonOperator4} from '../model/LastLoginFromComparisonOperator4';
import {LastLoginFromComparisonOperator5} from '../model/LastLoginFromComparisonOperator5';
import {LastLoginFromComparisonOperator6} from '../model/LastLoginFromComparisonOperator6';
import {LastLoginFromComparisonOperator7} from '../model/LastLoginFromComparisonOperator7';
import {LastLoginListComparisonOperator} from '../model/LastLoginListComparisonOperator';
import {LastLoginListComparisonOperator1} from '../model/LastLoginListComparisonOperator1';
import {LastLoginListComparisonOperator2} from '../model/LastLoginListComparisonOperator2';
import {LastLoginListComparisonOperator3} from '../model/LastLoginListComparisonOperator3';
import {LastLoginListComparisonOperator4} from '../model/LastLoginListComparisonOperator4';
import {LastLoginListComparisonOperator5} from '../model/LastLoginListComparisonOperator5';
import {LastLoginListComparisonOperator6} from '../model/LastLoginListComparisonOperator6';
import {LastLoginListComparisonOperator7} from '../model/LastLoginListComparisonOperator7';
import {LastLoginToComparisonOperator} from '../model/LastLoginToComparisonOperator';
import {LastLoginToComparisonOperator1} from '../model/LastLoginToComparisonOperator1';
import {LastLoginToComparisonOperator2} from '../model/LastLoginToComparisonOperator2';
import {LastLoginToComparisonOperator3} from '../model/LastLoginToComparisonOperator3';
import {LastLoginToComparisonOperator4} from '../model/LastLoginToComparisonOperator4';
import {LastLoginToComparisonOperator5} from '../model/LastLoginToComparisonOperator5';
import {LastLoginToComparisonOperator6} from '../model/LastLoginToComparisonOperator6';
import {LastLoginToComparisonOperator7} from '../model/LastLoginToComparisonOperator7';
import {LastNameListComparisonOperator} from '../model/LastNameListComparisonOperator';
import {LastNameListComparisonOperator1} from '../model/LastNameListComparisonOperator1';
import {LastNameListComparisonOperator2} from '../model/LastNameListComparisonOperator2';
import {LastNameListComparisonOperator3} from '../model/LastNameListComparisonOperator3';
import {LastNameListComparisonOperator4} from '../model/LastNameListComparisonOperator4';
import {LastNameListComparisonOperator5} from '../model/LastNameListComparisonOperator5';
import {LastNameListComparisonOperator6} from '../model/LastNameListComparisonOperator6';
import {LastNameListComparisonOperator7} from '../model/LastNameListComparisonOperator7';
import {MatchingPatternInStringBase} from '../model/MatchingPatternInStringBase';
import {PasswordListComparisonOperator} from '../model/PasswordListComparisonOperator';
import {PasswordListComparisonOperator1} from '../model/PasswordListComparisonOperator1';
import {PasswordListComparisonOperator2} from '../model/PasswordListComparisonOperator2';
import {PasswordListComparisonOperator3} from '../model/PasswordListComparisonOperator3';
import {PasswordListComparisonOperator4} from '../model/PasswordListComparisonOperator4';
import {PasswordListComparisonOperator5} from '../model/PasswordListComparisonOperator5';
import {PasswordListComparisonOperator6} from '../model/PasswordListComparisonOperator6';
import {PasswordListComparisonOperator7} from '../model/PasswordListComparisonOperator7';
import {UsernameListComparisonOperator} from '../model/UsernameListComparisonOperator';
import {UsernameListComparisonOperator1} from '../model/UsernameListComparisonOperator1';
import {UsernameListComparisonOperator2} from '../model/UsernameListComparisonOperator2';
import {UsernameListComparisonOperator3} from '../model/UsernameListComparisonOperator3';
import {UsernameListComparisonOperator4} from '../model/UsernameListComparisonOperator4';
import {UsernameListComparisonOperator5} from '../model/UsernameListComparisonOperator5';
import {UsernameListComparisonOperator6} from '../model/UsernameListComparisonOperator6';
import {UsernameListComparisonOperator7} from '../model/UsernameListComparisonOperator7';

/**
* App service.
* @module api/AppApi
* @version 0.1.0
*/
export class AppApi {

    /**
    * Constructs a new AppApi. 
    * @alias module:api/AppApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteManyByQueryUsersDelete operation.
     * @callback moduleapi/AppApi~deleteManyByQueryUsersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserDeleteManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Many By Query
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator18} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator18} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator18} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator2} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator2} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator2} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator2} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator2} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator2} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator2} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator2} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator2} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator2} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator2} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator2} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator2} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator2} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~deleteManyByQueryUsersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteManyByQueryUsersDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthUserDeleteManyItemListResponseModel;

      return this.apiClient.callApi(
        '/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteOneByPrimaryKeyUsersIdDelete operation.
     * @callback moduleapi/AppApi~deleteOneByPrimaryKeyUsersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserDeleteOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator6} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator6} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator6} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator6} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator6} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator6} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator6} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator6} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator6} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator6} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator6} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator6} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator6} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator6} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~deleteOneByPrimaryKeyUsersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteOneByPrimaryKeyUsersIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOneByPrimaryKeyUsersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthUserDeleteOneResponseModel;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the entireUpdateByPrimaryKeyUsersIdPut operation.
     * @callback moduleapi/AppApi~entireUpdateByPrimaryKeyUsersIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserUpdateOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entire Update By Primary Key
     * @param {module:model/BodyEntireUpdateByPrimaryKeyUsersIdPut} body 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator5} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator5} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator5} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator5} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator5} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator5} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator5} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator5} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator5} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator5} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator5} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator5} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator5} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator5} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~entireUpdateByPrimaryKeyUsersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    entireUpdateByPrimaryKeyUsersIdPut(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireUpdateByPrimaryKeyUsersIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entireUpdateByPrimaryKeyUsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthUserUpdateOneResponseModel;

      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the entireUpdateManyByQueryUsersPut operation.
     * @callback moduleapi/AppApi~entireUpdateManyByQueryUsersPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserUpdateManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entire Update Many By Query
     * @param {module:model/BodyEntireUpdateManyByQueryUsersPut} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator17} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator17} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator17} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator1} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator1} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator1} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator1} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator1} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator1} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator1} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator1} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator1} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator1} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator1} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator1} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator1} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator1} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~entireUpdateManyByQueryUsersPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    entireUpdateManyByQueryUsersPut(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireUpdateManyByQueryUsersPut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthUserUpdateManyItemListResponseModel;

      return this.apiClient.callApi(
        '/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getManyUsersGet operation.
     * @callback moduleapi/AppApi~getManyUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserFindManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Many
     * @param {Object} opts Optional parameters
     * @param {module:model/IdFromComparisonOperator16} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator16} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator16} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Array.<String>} opts.orderByColumns &lt;br&gt; support column:              &lt;br&gt; [&#x27;id&#x27;, &#x27;password&#x27;, &#x27;last_login&#x27;, &#x27;is_superuser&#x27;, &#x27;username&#x27;, &#x27;last_name&#x27;, &#x27;email&#x27;, &#x27;is_staff&#x27;, &#x27;is_active&#x27;, &#x27;date_joined&#x27;, &#x27;first_name&#x27;] &lt;hr&gt;&lt;br&gt; support ordering:               &lt;br&gt; [&#x27;DESC&#x27;, &#x27;ASC&#x27;]              &lt;hr&gt;              &lt;br/&gt;example:              &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column:ASC             &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column: DESC              &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column    :    DESC             &lt;br/&gt;&amp;emsp;&amp;emsp;any name of column (default sort by ASC)
     * @param {module:api/AppApi~getManyUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getManyUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi'),'limit': opts['limit'],'offset': opts['offset'],'order_by_columns': this.apiClient.buildCollectionParam(opts['orderByColumns'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthUserFindManyItemListResponseModel;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneByPrimaryKeyUsersIdGet operation.
     * @callback moduleapi/AppApi~getOneByPrimaryKeyUsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserFindOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator4} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator4} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator4} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator4} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator4} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator4} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator4} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator4} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator4} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator4} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator4} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator4} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator4} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator4} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~getOneByPrimaryKeyUsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneByPrimaryKeyUsersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneByPrimaryKeyUsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthUserFindOneResponseModel;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the insertManyUsersPost operation.
     * @callback moduleapi/AppApi~insertManyUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserCreateManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Many
     * @param {Array.<module:model/AuthUserCreateManyItemRequestModel>} body 
     * @param {module:api/AppApi~insertManyUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    insertManyUsersPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling insertManyUsersPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthUserCreateManyItemListResponseModel;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateManyByQueryUsersPatch operation.
     * @callback moduleapi/AppApi~partialUpdateManyByQueryUsersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserPatchManyItemListResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update Many By Query
     * @param {Object} opts Optional parameters
     * @param {module:model/BodyPartialUpdateManyByQueryUsersPatch} opts.body 
     * @param {module:model/IdFromComparisonOperator19} opts.idFromComparisonOperator 
     * @param {module:model/IdToComparisonOperator19} opts.idToComparisonOperator 
     * @param {Number} opts.idFrom 
     * @param {Number} opts.idTo 
     * @param {module:model/IdListComparisonOperator19} opts.idListComparisonOperator 
     * @param {Array.<Number>} opts.idList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator3} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator3} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator3} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator3} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator3} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator3} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator3} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator3} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator3} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator3} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator3} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator3} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator3} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator3} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~partialUpdateManyByQueryUsersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partialUpdateManyByQueryUsersPatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'id____from_____comparison_operator': opts['idFromComparisonOperator'],'id____to_____comparison_operator': opts['idToComparisonOperator'],'id____from': opts['idFrom'],'id____to': opts['idTo'],'id____list_____comparison_operator': opts['idListComparisonOperator'],'id____list': this.apiClient.buildCollectionParam(opts['idList'], 'multi'),'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthUserPatchManyItemListResponseModel;

      return this.apiClient.callApi(
        '/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateOneByPrimaryKeyUsersIdPatch operation.
     * @callback moduleapi/AppApi~partialUpdateOneByPrimaryKeyUsersIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthUserPatchOneResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update One By Primary Key
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/BodyPartialUpdateOneByPrimaryKeyUsersIdPatch} opts.body 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.passwordStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.passwordStr 
     * @param {module:model/PasswordListComparisonOperator7} opts.passwordListComparisonOperator 
     * @param {Array.<String>} opts.passwordList 
     * @param {module:model/LastLoginFromComparisonOperator7} opts.lastLoginFromComparisonOperator 
     * @param {module:model/LastLoginToComparisonOperator7} opts.lastLoginToComparisonOperator 
     * @param {Date} opts.lastLoginFrom 
     * @param {Date} opts.lastLoginTo 
     * @param {module:model/LastLoginListComparisonOperator7} opts.lastLoginListComparisonOperator 
     * @param {Array.<Date>} opts.lastLoginList 
     * @param {module:model/IsSuperuserListComparisonOperator7} opts.isSuperuserListComparisonOperator 
     * @param {Array.<Boolean>} opts.isSuperuserList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.usernameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.usernameStr 
     * @param {module:model/UsernameListComparisonOperator7} opts.usernameListComparisonOperator 
     * @param {Array.<String>} opts.usernameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.lastNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.lastNameStr 
     * @param {module:model/LastNameListComparisonOperator7} opts.lastNameListComparisonOperator 
     * @param {Array.<String>} opts.lastNameList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.emailStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.emailStr 
     * @param {module:model/EmailListComparisonOperator7} opts.emailListComparisonOperator 
     * @param {Array.<String>} opts.emailList 
     * @param {module:model/IsStaffListComparisonOperator7} opts.isStaffListComparisonOperator 
     * @param {Array.<Boolean>} opts.isStaffList 
     * @param {module:model/IsActiveListComparisonOperator7} opts.isActiveListComparisonOperator 
     * @param {Array.<Boolean>} opts.isActiveList 
     * @param {module:model/DateJoinedFromComparisonOperator7} opts.dateJoinedFromComparisonOperator 
     * @param {module:model/DateJoinedToComparisonOperator7} opts.dateJoinedToComparisonOperator 
     * @param {Date} opts.dateJoinedFrom 
     * @param {Date} opts.dateJoinedTo 
     * @param {module:model/DateJoinedListComparisonOperator7} opts.dateJoinedListComparisonOperator 
     * @param {Array.<Date>} opts.dateJoinedList 
     * @param {Array.<module:model/MatchingPatternInStringBase>} opts.firstNameStrMatchingPattern  (default to <.>)
     * @param {Array.<String>} opts.firstNameStr 
     * @param {module:model/FirstNameListComparisonOperator7} opts.firstNameListComparisonOperator 
     * @param {Array.<String>} opts.firstNameList 
     * @param {module:api/AppApi~partialUpdateOneByPrimaryKeyUsersIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    partialUpdateOneByPrimaryKeyUsersIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateOneByPrimaryKeyUsersIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'password____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['passwordStrMatchingPattern'], 'multi'),'password____str': this.apiClient.buildCollectionParam(opts['passwordStr'], 'multi'),'password____list_____comparison_operator': opts['passwordListComparisonOperator'],'password____list': this.apiClient.buildCollectionParam(opts['passwordList'], 'multi'),'last_login____from_____comparison_operator': opts['lastLoginFromComparisonOperator'],'last_login____to_____comparison_operator': opts['lastLoginToComparisonOperator'],'last_login____from': opts['lastLoginFrom'],'last_login____to': opts['lastLoginTo'],'last_login____list_____comparison_operator': opts['lastLoginListComparisonOperator'],'last_login____list': this.apiClient.buildCollectionParam(opts['lastLoginList'], 'multi'),'is_superuser____list_____comparison_operator': opts['isSuperuserListComparisonOperator'],'is_superuser____list': this.apiClient.buildCollectionParam(opts['isSuperuserList'], 'multi'),'username____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['usernameStrMatchingPattern'], 'multi'),'username____str': this.apiClient.buildCollectionParam(opts['usernameStr'], 'multi'),'username____list_____comparison_operator': opts['usernameListComparisonOperator'],'username____list': this.apiClient.buildCollectionParam(opts['usernameList'], 'multi'),'last_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['lastNameStrMatchingPattern'], 'multi'),'last_name____str': this.apiClient.buildCollectionParam(opts['lastNameStr'], 'multi'),'last_name____list_____comparison_operator': opts['lastNameListComparisonOperator'],'last_name____list': this.apiClient.buildCollectionParam(opts['lastNameList'], 'multi'),'email____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['emailStrMatchingPattern'], 'multi'),'email____str': this.apiClient.buildCollectionParam(opts['emailStr'], 'multi'),'email____list_____comparison_operator': opts['emailListComparisonOperator'],'email____list': this.apiClient.buildCollectionParam(opts['emailList'], 'multi'),'is_staff____list_____comparison_operator': opts['isStaffListComparisonOperator'],'is_staff____list': this.apiClient.buildCollectionParam(opts['isStaffList'], 'multi'),'is_active____list_____comparison_operator': opts['isActiveListComparisonOperator'],'is_active____list': this.apiClient.buildCollectionParam(opts['isActiveList'], 'multi'),'date_joined____from_____comparison_operator': opts['dateJoinedFromComparisonOperator'],'date_joined____to_____comparison_operator': opts['dateJoinedToComparisonOperator'],'date_joined____from': opts['dateJoinedFrom'],'date_joined____to': opts['dateJoinedTo'],'date_joined____list_____comparison_operator': opts['dateJoinedListComparisonOperator'],'date_joined____list': this.apiClient.buildCollectionParam(opts['dateJoinedList'], 'multi'),'first_name____str_____matching_pattern': this.apiClient.buildCollectionParam(opts['firstNameStrMatchingPattern'], 'multi'),'first_name____str': this.apiClient.buildCollectionParam(opts['firstNameStr'], 'multi'),'first_name____list_____comparison_operator': opts['firstNameListComparisonOperator'],'first_name____list': this.apiClient.buildCollectionParam(opts['firstNameList'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthUserPatchOneResponseModel;

      return this.apiClient.callApi(
        '/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}