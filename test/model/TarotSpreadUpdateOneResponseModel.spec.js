/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FastApi);
  }
}(this, function(expect, FastApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TarotSpreadUpdateOneResponseModel', function() {
      beforeEach(function() {
        instance = new FastApi.TarotSpreadUpdateOneResponseModel();
      });

      it('should create an instance of TarotSpreadUpdateOneResponseModel', function() {
        // TODO: update the code to test TarotSpreadUpdateOneResponseModel
        expect(instance).to.be.a(FastApi.TarotSpreadUpdateOneResponseModel);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property uid (base name: "uid")', function() {
        // TODO: update the code to test the property uid
        expect(instance).to.have.property('uid');
        // expect(instance.uid).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property cardsCount (base name: "cards_count")', function() {
        // TODO: update the code to test the property cardsCount
        expect(instance).to.have.property('cardsCount');
        // expect(instance.cardsCount).to.be(expectedValueLiteral);
      });

      it('should have the property isCustomizable (base name: "is_customizable")', function() {
        // TODO: update the code to test the property isCustomizable
        expect(instance).to.have.property('isCustomizable');
        // expect(instance.isCustomizable).to.be(expectedValueLiteral);
      });

      it('should have the property totalCards (base name: "total_cards")', function() {
        // TODO: update the code to test the property totalCards
        expect(instance).to.have.property('totalCards');
        // expect(instance.totalCards).to.be(expectedValueLiteral);
      });

      it('should have the property layout (base name: "layout")', function() {
        // TODO: update the code to test the property layout
        expect(instance).to.have.property('layout');
        // expect(instance.layout).to.be(expectedValueLiteral);
      });

    });
  });

}));
