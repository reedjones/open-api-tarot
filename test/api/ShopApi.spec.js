/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FastApi);
  }
}(this, function(expect, FastApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FastApi.ShopApi();
  });

  describe('(package)', function() {
    describe('ShopApi', function() {
      describe('deleteManyByQueryProductsDelete', function() {
        it('should call deleteManyByQueryProductsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteManyByQueryProductsDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteManyByQueryProductsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductDeleteManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOneByPrimaryKeyProductsIdDelete', function() {
        it('should call deleteOneByPrimaryKeyProductsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOneByPrimaryKeyProductsIdDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteOneByPrimaryKeyProductsIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductDeleteOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateByPrimaryKeyProductsIdPut', function() {
        it('should call entireUpdateByPrimaryKeyProductsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateByPrimaryKeyProductsIdPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateByPrimaryKeyProductsIdPut(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductUpdateOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateManyByQueryProductsPut', function() {
        it('should call entireUpdateManyByQueryProductsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateManyByQueryProductsPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateManyByQueryProductsPut(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductUpdateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getManyProductsGet', function() {
        it('should call getManyProductsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getManyProductsGet call and complete the assertions
          /*
          var opts = {};

          instance.getManyProductsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductFindManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOneByPrimaryKeyProductsIdGet', function() {
        it('should call getOneByPrimaryKeyProductsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getOneByPrimaryKeyProductsIdGet call and complete the assertions
          /*
          var opts = {};

          instance.getOneByPrimaryKeyProductsIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductFindOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('insertManyProductsPost', function() {
        it('should call insertManyProductsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for insertManyProductsPost call and complete the assertions
          /*

          instance.insertManyProductsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductCreateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateManyByQueryProductsPatch', function() {
        it('should call partialUpdateManyByQueryProductsPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateManyByQueryProductsPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateManyByQueryProductsPatch(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductPatchManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateOneByPrimaryKeyProductsIdPatch', function() {
        it('should call partialUpdateOneByPrimaryKeyProductsIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateOneByPrimaryKeyProductsIdPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateOneByPrimaryKeyProductsIdPatch(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotProductPatchOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
