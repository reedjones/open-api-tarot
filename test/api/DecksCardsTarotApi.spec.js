/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FastApi);
  }
}(this, function(expect, FastApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FastApi.DecksCardsTarotApi();
  });

  describe('(package)', function() {
    describe('DecksCardsTarotApi', function() {
      describe('deleteManyByQueryCardsDelete', function() {
        it('should call deleteManyByQueryCardsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteManyByQueryCardsDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteManyByQueryCardsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardDeleteManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOneByPrimaryKeyCardsIdDelete', function() {
        it('should call deleteOneByPrimaryKeyCardsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOneByPrimaryKeyCardsIdDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteOneByPrimaryKeyCardsIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardDeleteOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateByPrimaryKeyCardsIdPut', function() {
        it('should call entireUpdateByPrimaryKeyCardsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateByPrimaryKeyCardsIdPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateByPrimaryKeyCardsIdPut(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardUpdateOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateManyByQueryCardsPut', function() {
        it('should call entireUpdateManyByQueryCardsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateManyByQueryCardsPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateManyByQueryCardsPut(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardUpdateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getManyCardsGet', function() {
        it('should call getManyCardsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getManyCardsGet call and complete the assertions
          /*
          var opts = {};

          instance.getManyCardsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardFindManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOneByPrimaryKeyCardsIdGet', function() {
        it('should call getOneByPrimaryKeyCardsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getOneByPrimaryKeyCardsIdGet call and complete the assertions
          /*
          var opts = {};

          instance.getOneByPrimaryKeyCardsIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardFindOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('insertManyCardsPost', function() {
        it('should call insertManyCardsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for insertManyCardsPost call and complete the assertions
          /*

          instance.insertManyCardsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardCreateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateManyByQueryCardsPatch', function() {
        it('should call partialUpdateManyByQueryCardsPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateManyByQueryCardsPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateManyByQueryCardsPatch(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardPatchManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateOneByPrimaryKeyCardsIdPatch', function() {
        it('should call partialUpdateOneByPrimaryKeyCardsIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateOneByPrimaryKeyCardsIdPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateOneByPrimaryKeyCardsIdPatch(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotDeckCardPatchOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
