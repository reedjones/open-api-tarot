/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FastApi);
  }
}(this, function(expect, FastApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FastApi.AppApi();
  });

  describe('(package)', function() {
    describe('AppApi', function() {
      describe('deleteManyByQueryUsersDelete', function() {
        it('should call deleteManyByQueryUsersDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteManyByQueryUsersDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteManyByQueryUsersDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserDeleteManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOneByPrimaryKeyUsersIdDelete', function() {
        it('should call deleteOneByPrimaryKeyUsersIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOneByPrimaryKeyUsersIdDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteOneByPrimaryKeyUsersIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserDeleteOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateByPrimaryKeyUsersIdPut', function() {
        it('should call entireUpdateByPrimaryKeyUsersIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateByPrimaryKeyUsersIdPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateByPrimaryKeyUsersIdPut(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserUpdateOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateManyByQueryUsersPut', function() {
        it('should call entireUpdateManyByQueryUsersPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateManyByQueryUsersPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateManyByQueryUsersPut(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserUpdateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getManyUsersGet', function() {
        it('should call getManyUsersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getManyUsersGet call and complete the assertions
          /*
          var opts = {};

          instance.getManyUsersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserFindManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOneByPrimaryKeyUsersIdGet', function() {
        it('should call getOneByPrimaryKeyUsersIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getOneByPrimaryKeyUsersIdGet call and complete the assertions
          /*
          var opts = {};

          instance.getOneByPrimaryKeyUsersIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserFindOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('insertManyUsersPost', function() {
        it('should call insertManyUsersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for insertManyUsersPost call and complete the assertions
          /*

          instance.insertManyUsersPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserCreateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateManyByQueryUsersPatch', function() {
        it('should call partialUpdateManyByQueryUsersPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateManyByQueryUsersPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateManyByQueryUsersPatch(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserPatchManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateOneByPrimaryKeyUsersIdPatch', function() {
        it('should call partialUpdateOneByPrimaryKeyUsersIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateOneByPrimaryKeyUsersIdPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateOneByPrimaryKeyUsersIdPatch(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.AuthUserPatchOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
