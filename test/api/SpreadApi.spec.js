/*
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FastApi);
  }
}(this, function(expect, FastApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FastApi.SpreadApi();
  });

  describe('(package)', function() {
    describe('SpreadApi', function() {
      describe('deleteManyByQuerySpreadsDelete', function() {
        it('should call deleteManyByQuerySpreadsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteManyByQuerySpreadsDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteManyByQuerySpreadsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadDeleteManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOneByPrimaryKeySpreadsIdDelete', function() {
        it('should call deleteOneByPrimaryKeySpreadsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOneByPrimaryKeySpreadsIdDelete call and complete the assertions
          /*
          var opts = {};

          instance.deleteOneByPrimaryKeySpreadsIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadDeleteOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateByPrimaryKeySpreadsIdPut', function() {
        it('should call entireUpdateByPrimaryKeySpreadsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateByPrimaryKeySpreadsIdPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateByPrimaryKeySpreadsIdPut(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadUpdateOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('entireUpdateManyByQuerySpreadsPut', function() {
        it('should call entireUpdateManyByQuerySpreadsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for entireUpdateManyByQuerySpreadsPut call and complete the assertions
          /*
          var opts = {};

          instance.entireUpdateManyByQuerySpreadsPut(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadUpdateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getManySpreadsGet', function() {
        it('should call getManySpreadsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getManySpreadsGet call and complete the assertions
          /*
          var opts = {};

          instance.getManySpreadsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadFindManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOneByPrimaryKeySpreadsIdGet', function() {
        it('should call getOneByPrimaryKeySpreadsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getOneByPrimaryKeySpreadsIdGet call and complete the assertions
          /*
          var opts = {};

          instance.getOneByPrimaryKeySpreadsIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadFindOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('insertManySpreadsPost', function() {
        it('should call insertManySpreadsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for insertManySpreadsPost call and complete the assertions
          /*

          instance.insertManySpreadsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadCreateManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateManyByQuerySpreadsPatch', function() {
        it('should call partialUpdateManyByQuerySpreadsPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateManyByQuerySpreadsPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateManyByQuerySpreadsPatch(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadPatchManyItemListResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partialUpdateOneByPrimaryKeySpreadsIdPatch', function() {
        it('should call partialUpdateOneByPrimaryKeySpreadsIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for partialUpdateOneByPrimaryKeySpreadsIdPatch call and complete the assertions
          /*
          var opts = {};

          instance.partialUpdateOneByPrimaryKeySpreadsIdPatch(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FastApi.TarotSpreadPatchOneResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
